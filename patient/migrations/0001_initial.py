# Generated by Django 2.2.5 on 2023-02-08 23:31

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CollectData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collected_data', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Collected Data')),
                ('ecg', models.BooleanField(blank=True, default=False, null=True, verbose_name='ECG')),
                ('ppg', models.BooleanField(blank=True, default=False, null=True, verbose_name='PPG')),
                ('abp', models.BooleanField(blank=True, default=False, null=True, verbose_name='ABP')),
                ('emg', models.BooleanField(blank=True, default=False, null=True, verbose_name='EMG')),
                ('abspathrecord_times', models.PositiveSmallIntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Abspathrecord Times')),
                ('sampling_freq_hz', models.PositiveSmallIntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Sampling (Freq_Hz)')),
                ('device', models.PositiveSmallIntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Device')),
                ('ecg_signal', models.FileField(blank=True, null=True, upload_to='txt/', verbose_name='ECG Signal (.txt)')),
                ('observations', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Observations')),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collected_data', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Collected Data')),
                ('subject_name', models.CharField(max_length=200, verbose_name='Subject Name')),
                ('age', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(150)], verbose_name='Age')),
                ('initials', models.CharField(max_length=10, verbose_name='Initials')),
                ('gender', models.PositiveSmallIntegerField(choices=[(1, 'Male'), (2, 'Female')], validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(2)], verbose_name='Gender')),
                ('weight', models.FloatField(help_text='EX: 65,5', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(400.0)], verbose_name='Weight (kg)')),
                ('height', models.FloatField(help_text='EX: 1,82', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4)], verbose_name='Height (m)')),
                ('phone', models.CharField(blank=True, help_text='(DDD) 9 9999-9999', max_length=15, verbose_name='Phone')),
                ('state', models.CharField(blank=True, choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins')], max_length=2, verbose_name='State')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='City')),
                ('bmi', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(450.0)], verbose_name='BMI')),
                ('bsa', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(150.0)], verbose_name='BSA')),
                ('smoker', models.BooleanField(default=False, verbose_name='Smoker')),
                ('alcohol', models.BooleanField(default=False, verbose_name='Alcohol')),
                ('physical_activity', models.PositiveSmallIntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Physical Activity')),
                ('dm', models.BooleanField(default=False, verbose_name='DM')),
                ('type_dm', models.PositiveSmallIntegerField(choices=[(0, 'Does Not Have'), (1, 'Type 1'), (2, 'Type 2'), (3, 'Type 3 Gestational')], default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)], verbose_name='Type DM')),
                ('age_dm_diagnosis', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Age DM Diagnosis')),
                ('dm_duration', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='DM Duration')),
                ('hipo_mes', models.SmallIntegerField(default=0, verbose_name='Hipo Mes')),
                ('internacao_dm', models.BooleanField(default=False, verbose_name='Internation DM')),
                ('sbp_repous', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='SDP Repous')),
                ('dbp_repous', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='DBP Repous')),
                ('sbp_empe', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='SDP Empe')),
                ('dbp_empe', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='DBP Empe')),
                ('sbp_change', models.SmallIntegerField(blank=True, null=True, verbose_name='SDP Change')),
                ('dbp_change', models.SmallIntegerField(blank=True, null=True, verbose_name='DBP Change')),
                ('postural_drop', models.BooleanField(blank=True, null=True, verbose_name='Postural Drop')),
                ('mean_hr', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Mean Hr')),
                ('rr_resting', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)], verbose_name='RR Resting')),
                ('rr_db', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)], verbose_name='RR Deep Breathing')),
                ('rr_valsalva', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)], verbose_name='RR Valsalva')),
                ('rr_standing', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)], verbose_name='RR Standing')),
                ('obrienc_cs', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Obrienc CS')),
                ('can_status', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Can Status')),
                ('brs_status', models.CharField(blank=True, max_length=50, null=True, verbose_name='Brs Status')),
                ('observations', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Observations')),
            ],
        ),
        migrations.CreateModel(
            name='Study',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collected_data', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Collected Data')),
                ('name_study', models.CharField(blank=True, max_length=200, null=True, verbose_name='Study Name')),
            ],
        ),
        migrations.CreateModel(
            name='Medicine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collected_data', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Collected Data')),
                ('insulin', models.BooleanField(default=False, verbose_name='Insulin')),
                ('ace_arb', models.BooleanField(default=False, verbose_name='Ace Arb')),
                ('sinvas_mg', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Sinvas (Mg)')),
                ('atorvas_mg', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Atorvas (Mg)')),
                ('rosuvas_mg', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Rosuvas (Mg)')),
                ('losartan_mg', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Losartan (Mg)')),
                ('enalapril_mg', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Enalapril (Mg)')),
                ('quetiapina_mg', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Quetiapina (Mg)')),
                ('venlafaxina_mg', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Venlafaxina (Mg)')),
                ('omeprazol_mg', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Omeprazol (Mg)')),
                ('ranitidina_mg', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Ranitidina (Mg)')),
                ('carbamazpn_mg', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Carbamazpn (Mg)')),
                ('anticoncepcional', models.BooleanField(default=False, verbose_name='Anticoncepcional')),
                ('aas_mg', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='AAS (Mg)')),
                ('lt4_mg', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='LT4 (Mg)')),
                ('mtf_mg', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='MTF (Mg)')),
                ('observations', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Observations')),
                ('patient_medicines', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patient.Patient', verbose_name='Patient Medicines')),
            ],
        ),
        migrations.CreateModel(
            name='HRVTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collected_data', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Collected Data')),
                ('nn_mean', models.FloatField(blank=True, null=True, verbose_name='NN Mean')),
                ('nn_median', models.FloatField(blank=True, null=True, verbose_name='NN Median')),
                ('nn_mode', models.FloatField(blank=True, null=True, verbose_name='NN Mode')),
                ('nn_variance', models.FloatField(blank=True, null=True, verbose_name='NN Variance')),
                ('nn_skew', models.FloatField(blank=True, null=True, verbose_name='NN Skewness')),
                ('nn_kurt', models.FloatField(blank=True, null=True, verbose_name='NN Kurtosis')),
                ('nn_iqr', models.FloatField(blank=True, null=True, verbose_name='NN Interquartile')),
                ('sd_nn', models.FloatField(blank=True, null=True, verbose_name='SD NN')),
                ('cv', models.FloatField(blank=True, null=True, verbose_name='Coefficient Variation')),
                ('rmssd', models.FloatField(blank=True, null=True, verbose_name='RMSSD')),
                ('sdsd', models.FloatField(blank=True, null=True, verbose_name='SDSD')),
                ('nn50', models.FloatField(blank=True, null=True, verbose_name='NN (50ms)')),
                ('pnn50_pr', models.FloatField(blank=True, null=True, verbose_name='pNN (50ms) pr')),
                ('nn20', models.FloatField(blank=True, null=True, verbose_name='NN (20ms)')),
                ('pnn20_pr', models.FloatField(blank=True, null=True, verbose_name='pNN (20ms) pr ')),
                ('hr_change', models.FloatField(blank=True, null=True, verbose_name='Hr Change')),
                ('hti', models.FloatField(blank=True, null=True, verbose_name='HTI')),
                ('tinn', models.FloatField(blank=True, null=True, verbose_name='TINN')),
                ('si', models.FloatField(blank=True, null=True, verbose_name='SI')),
                ('collectdata_time', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='patient.CollectData', verbose_name='Collect Data Time')),
            ],
        ),
        migrations.CreateModel(
            name='HRVNonLinear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collected_data', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Collected Data')),
                ('sd1', models.FloatField(blank=True, null=True, verbose_name='Standard Deviation Perpendicular')),
                ('sd2', models.FloatField(blank=True, null=True, verbose_name='Standard Deviation Along')),
                ('sd1_sd2_ratio', models.FloatField(blank=True, null=True, verbose_name='SD_Perp SD_Along Ratio')),
                ('ellipse_area', models.FloatField(blank=True, null=True, verbose_name='Ellipse Area')),
                ('csi', models.FloatField(blank=True, null=True, verbose_name='Cardiac Sympathetic Index')),
                ('cvi', models.FloatField(blank=True, null=True, verbose_name='Cardiac Vagal Index')),
                ('alpha1', models.FloatField(blank=True, null=True, verbose_name='Alpha 1')),
                ('alpha2', models.FloatField(blank=True, null=True, verbose_name='Alpha 2')),
                ('d2_10', models.FloatField(blank=True, null=True, verbose_name='D2 (dimension 10)')),
                ('d2_20', models.FloatField(blank=True, null=True, verbose_name='D2 (dimension 20)')),
                ('ent_aprox_1_01', models.FloatField(blank=True, null=True, verbose_name='Entropy Aprox_1_01')),
                ('ent_aprox_1_015', models.FloatField(blank=True, null=True, verbose_name='Entropy Aprox_1_015')),
                ('ent_aprox_1_02', models.FloatField(blank=True, null=True, verbose_name='Entropy Aprox_1_02')),
                ('ent_aprox_1_025', models.FloatField(blank=True, null=True, verbose_name='Entropy Aprox_1_025')),
                ('ent_aprox_2_01', models.FloatField(blank=True, null=True, verbose_name='Entropy Aprox_2_01')),
                ('ent_aprox_2_015', models.FloatField(blank=True, null=True, verbose_name='Entropy Aprox_2_015')),
                ('ent_aprox_2_02', models.FloatField(blank=True, null=True, verbose_name='Entropy Aprox_2_02')),
                ('ent_aprox_2_025', models.FloatField(blank=True, null=True, verbose_name='Entropy Aprox_2_025')),
                ('ent_amostra_1', models.FloatField(blank=True, null=True, verbose_name='Entropy Amostra_1')),
                ('ent_amostra_2', models.FloatField(blank=True, null=True, verbose_name='Entropy Amostra_2')),
                ('ent_multiescala_e3', models.FloatField(blank=True, null=True, verbose_name='Entropy Multiescala_E3')),
                ('ent_multiescala_e5', models.FloatField(blank=True, null=True, verbose_name='Entropy Multiescala_E5')),
                ('ent_fuzzy', models.FloatField(blank=True, null=True, verbose_name='Entropy Fuzzy')),
                ('ent_shannon_1', models.FloatField(blank=True, null=True, verbose_name='Entropy Shannon1')),
                ('ent_shannon_2', models.FloatField(blank=True, null=True, verbose_name='Entropy Shannon_2')),
                ('ent_spectral', models.FloatField(blank=True, null=True, verbose_name='Entropy Spectral')),
                ('ent_permutation_1', models.FloatField(blank=True, null=True, verbose_name='Entropy Permutation_1')),
                ('norm_entropy', models.FloatField(blank=True, null=True, verbose_name='Norm Entropy')),
                ('ent_permutation_2', models.FloatField(blank=True, null=True, verbose_name='Entropy Permutation_2')),
                ('ent_conditional', models.FloatField(blank=True, null=True, verbose_name='Entropy Conditional')),
                ('ent_corrected_cond', models.FloatField(blank=True, null=True, verbose_name='Entropy Corrected_Cond')),
                ('ctm_r1', models.FloatField(blank=True, null=True, verbose_name='Ctm R1 (r = 10)')),
                ('ctm_r2', models.FloatField(blank=True, null=True, verbose_name='Ctm R2 (r = 20)')),
                ('ctm_r3', models.FloatField(blank=True, null=True, verbose_name='Ctm R3 (r = 40)')),
                ('area_sodp_rr_log', models.FloatField(blank=True, null=True, verbose_name='Area Sodp RR (log)')),
                ('area_sodp_rr', models.FloatField(blank=True, null=True, verbose_name='Area Sodp RR')),
                ('mean_dr1', models.FloatField(blank=True, null=True, verbose_name='Mean Dr1 (r = 10)')),
                ('mean_dr2', models.FloatField(blank=True, null=True, verbose_name='Mean Dr2 (r = 20)')),
                ('mean_dr3', models.FloatField(blank=True, null=True, verbose_name='Mean Dr3 (r = 40)')),
                ('mean_dr4', models.FloatField(blank=True, null=True, verbose_name='Mean Dr4 (r = 60)')),
                ('mean_dr5', models.FloatField(blank=True, null=True, verbose_name='Mean Dr5 (r = 80)')),
                ('collectdata_non_lin', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='patient.CollectData', verbose_name='Collectdata Non_Lin')),
            ],
        ),
        migrations.CreateModel(
            name='HRVFreq',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collected_data', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Collected Data')),
                ('ulf_lomb_ms2', models.FloatField(blank=True, null=True, verbose_name='Ultra Low Frequency Lomb (≤0.003 Hz)')),
                ('vlf_lomb_ms2', models.FloatField(blank=True, null=True, verbose_name='Very Low Frequency Lomb (0.0033–0.04 Hz)')),
                ('lf_lomb_ms2', models.FloatField(blank=True, null=True, verbose_name='Low Frequency Lomb (0.04–0.15 Hz)')),
                ('hf_lomb_ms2', models.FloatField(blank=True, null=True, verbose_name='High Frequency Lomb (0.15–0.4 Hz)')),
                ('ulf_lomb_log', models.FloatField(blank=True, null=True, verbose_name='ULF Lomb Log')),
                ('vlf_lomb_log', models.FloatField(blank=True, null=True, verbose_name='VLF Lomb Log')),
                ('lf_lomb_log', models.FloatField(blank=True, null=True, verbose_name='LF Lomb Log')),
                ('hf_lomb_log', models.FloatField(blank=True, null=True, verbose_name='HF Lomb Log')),
                ('ttlpwr_lomb_ms2', models.FloatField(blank=True, null=True, verbose_name='TTLPWR Lomb Ms2')),
                ('lf_hf_lomb', models.FloatField(blank=True, null=True, verbose_name='LF Hf_Lomb')),
                ('power_vlf_lomb', models.FloatField(blank=True, null=True, verbose_name='Power VLF Lomb')),
                ('power_lf_lomb', models.FloatField(blank=True, null=True, verbose_name='Power LF Lomb')),
                ('power_hf_lomb', models.FloatField(blank=True, null=True, verbose_name='Power HF Lomb')),
                ('lf_nu_lomb', models.FloatField(blank=True, null=True, verbose_name='LF NU Lomb')),
                ('hf_nu_lomb', models.FloatField(blank=True, null=True, verbose_name='HF NU Lomb')),
                ('ulf_welch', models.FloatField(blank=True, null=True, verbose_name='ULF Welch')),
                ('vlf_welch', models.FloatField(blank=True, null=True, verbose_name='VLF Welch')),
                ('lf_welch', models.FloatField(blank=True, null=True, verbose_name='LF Welch')),
                ('hf_welch', models.FloatField(blank=True, null=True, verbose_name='HF Welch')),
                ('ttlpwr_welch', models.FloatField(blank=True, null=True, verbose_name='TTLPWR Welch')),
                ('lfhf_welch', models.FloatField(blank=True, null=True, verbose_name='LF HF Welch')),
                ('power_vlf_welch', models.FloatField(blank=True, null=True, verbose_name='Power VLF Welch')),
                ('power_lf_welch', models.FloatField(blank=True, null=True, verbose_name='Power LF Welch')),
                ('power_hf_welch', models.FloatField(blank=True, null=True, verbose_name='Power HF Welch')),
                ('lf_nu_welch', models.FloatField(blank=True, null=True, verbose_name='LF NU Welch')),
                ('hf_nu_welch', models.FloatField(blank=True, null=True, verbose_name='HF NU Welch')),
                ('collectdata_freq', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='patient.CollectData', verbose_name='Collect Data Frequence')),
            ],
        ),
        migrations.CreateModel(
            name='ExamsResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collected_data', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Collected Data')),
                ('hba1c_percent', models.PositiveSmallIntegerField(null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='HbA1c (%)')),
                ('hba1c_mmol_mol', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='HbA1c (Mmol_Mol)')),
                ('hb_g_dl', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Hb (g_dL)')),
                ('glicemia_mg_dl', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Glicemia (Mg_dL)')),
                ('glicemia_mmol_l', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Glicemia (Mmol_L)')),
                ('urine_albumina_mg_24h', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Urine Albumina (Mg_24H)')),
                ('microAlb', models.BooleanField(default=False, verbose_name='Micro Alb')),
                ('creatina_mg_dl', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Creatina (Mg_dL)')),
                ('creatina_umol_l', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Creatina (Umol_L)')),
                ('acr_alb_creat', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='ACR Alb_Creat')),
                ('rpc_prot_creat', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='RPC Prot_Creat')),
                ('clear_creatinina', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Clear Creatinina')),
                ('ct_mg_dl', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Colesterol Total (Mg_dL)')),
                ('ct_mmol_l', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Colesterol Total (Mmol_L)')),
                ('hdl_mg_dl', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='HDL (Mg_dL)')),
                ('ldl_mg_dl', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='LDL (Mg_dL)')),
                ('vitb12', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Vit B12')),
                ('vitd', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Vit D')),
                ('tsh', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Hormônio Tireoestimulante')),
                ('tg_mg_dl', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Triglicerídeos (Mg_dL)')),
                ('tg_mmol_l', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Triglicerídeos (Mmol_L)')),
                ('na', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Sódio')),
                ('basek', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Baseline Potássio')),
                ('ureia', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Ureia')),
                ('patient_exams', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patient.Patient', verbose_name='Patient Exams')),
            ],
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collected_data', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Collected Data')),
                ('drge', models.BooleanField(default=False, verbose_name='DRGE')),
                ('vitiligo', models.BooleanField(default=False, verbose_name='Vitiligo')),
                ('doenca_celiaca', models.BooleanField(default=False, verbose_name='Celiac Disease')),
                ('doenca_pulmonar', models.BooleanField(default=False, verbose_name='Lung Disease')),
                ('ace_arb', models.BooleanField(default=False, verbose_name='ACE/ARB Therapy')),
                ('tireoide', models.BooleanField(default=False, verbose_name='Tireoide')),
                ('retinopathy', models.BooleanField(default=False, verbose_name='Retinopathy')),
                ('nephropathy', models.BooleanField(default=False, verbose_name='Nephropathy')),
                ('peripheral_neuropathy', models.BooleanField(default=False, verbose_name='Peripheral Neuropathy')),
                ('pn_symptoms', models.CharField(blank=True, max_length=200, null=True, verbose_name='PN Symptoms')),
                ('pn_signs', models.CharField(blank=True, max_length=200, null=True, verbose_name='PN Signs')),
                ('patient_conditions', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='patient.Patient', verbose_name='Patient Conditions')),
            ],
        ),
        migrations.AddField(
            model_name='collectdata',
            name='patient_data',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patient.Patient', verbose_name='Patient Data'),
        ),
        migrations.AddField(
            model_name='collectdata',
            name='study',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patient.Study', verbose_name='Study'),
        ),
    ]
